{"remainingRequest":"C:\\Workspace\\github\\cademint-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Workspace\\github\\cademint-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Workspace\\github\\cademint-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Workspace\\github\\cademint-app\\src\\components2\\feed.vue?vue&type=template&id=fd5f316c&scoped=true&","dependencies":[{"path":"C:\\Workspace\\github\\cademint-app\\src\\components2\\feed.vue","mtime":1630508322736},{"path":"C:\\Workspace\\github\\cademint-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Workspace\\github\\cademint-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Workspace\\github\\cademint-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Workspace\\github\\cademint-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}