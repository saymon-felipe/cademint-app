{"remainingRequest":"C:\\Workspace\\cademint-app\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Workspace\\cademint-app\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Workspace\\cademint-app\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Workspace\\cademint-app\\app\\src\\components\\myRooms.vue?vue&type=template&id=47689ccc&scoped=true&","dependencies":[{"path":"C:\\Workspace\\cademint-app\\app\\src\\components\\myRooms.vue","mtime":1631934117651},{"path":"C:\\Workspace\\cademint-app\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Workspace\\cademint-app\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Workspace\\cademint-app\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Workspace\\cademint-app\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}